{"version":3,"sources":["api/api.ts","assets/images/default_avatar.png","redux/dialogs_reducer.ts","components/common/Preloader/Preloader.module.scss","components/Navbar/Navbar.module.scss","components/common/FormsControls/FormsControls.tsx","api/auth-api.ts","api/security-api.ts","redux/auth_reducer.ts","redux/app_reducer.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Users/User.tsx","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","units/validators/object_helpers.ts","api/users-api.ts","redux/users_reducer.ts","redux/users_selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.js","redux/sidebar_reducer.ts","redux/redux-store.ts","index.jsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.scss","units/validators/validators.ts","components/common/Paginator/paginator.module.scss","components/Users/users.module.scss","components/Header/Header.module.scss","hoc/withAuthRedirect.tsx","api/profile-api.ts","redux/profile_reducer.ts"],"names":["ResultCodeEnum","ResultCodeCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","module","exports","initialState","dialogs","id","name","messages","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","FormControl","meta","touched","error","children","hasError","className","styles","formControl","TextArea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","authAPI","get","then","res","data","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","dispatch","a","meData","resultCode","Success","authReducer","initialized","appReducer","Navbar","s","navbar","navbar_button","to","activeClassName","active","Music","News","Settings","User","user","followingInProgress","unFollow","follow","userItems","src","photos","small","userPhoto","alt","usersPhoto","followed","disabled","some","onClick","status","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","cn","selectedPage","pageNumber","key","Users","totalUsersCount","users","isFetching","Preloader","u","updateObjectInArray","items","itemId","objPropName","newObjProps","usersApi","getUsers","response","userId","count","followUnFollowFlow","apiMethod","actionCreator","usersReducer","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","React","Component","compose","withAuthRedirect","connect","bind","totalCount","Header","logOut","header","loginBlock","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","style","formSummaryError","loginData","CaptchaIsRequired","url","length","stopSubmit","_error","DialogsContainer","lazy","ProfileContainer","withRouter","app","initializeApp","promise","Promise","all","useEffect","Suspense","fallback","path","exact","Login","render","Boolean","window","location","hostname","match","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","lds_ellipsis","value","maxLengthCreator","maxLength","mapStateToPropsForRedirect","profileAPI","put","photoFile","formData","FormData","append","profile","posts","likesCount","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getStatus","updateStatus","savePhoto","file","saveProfile","getState","getUserProfile","Error","reject","newPost"],"mappings":"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","file":"static/js/main.424d35ef.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {UsersType} from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"16be0939-6c39-4d1e-95d5-a19401f38e3a\"\r\n    },\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\nexport enum ResultCodeCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UsersType>\r\n    totalCount: number,\r\n    error: null | string\r\n}\r\n\r\nexport type APIResponseType<D = {},RC = ResultCodeEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/default_avatar.7e3dbe23.png\";","import {InferActionsTypes } from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number, name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number, message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Аноним\"},\r\n        {id: 2, name: \"Аноним\"},\r\n        {id: 3, name: \"Аноним\"},\r\n        {id: 5, name: \"Аноним\"},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Hey yo\"},\r\n    ] as Array<MessageType>,\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({\r\n        type: \"SEND-MESSAGE\" ,newMessageBody} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_ellipsis\":\"Preloader_lds_ellipsis__Pgs5k\",\"lds-ellipsis1\":\"Preloader_lds-ellipsis1__2zy5n\",\"lds-ellipsis2\":\"Preloader_lds-ellipsis2__3rCGb\",\"lds-ellipsis3\":\"Preloader_lds-ellipsis3__3b2y5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__14lBz\",\"navbar_button\":\"Navbar_navbar_button__1aWtC\",\"active\":\"Navbar_active__1zKWB\"};","import React from \"react\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\nimport styles from \"./FormsControls.module.scss\";\r\n\r\nimport {FieldValidatorType} from \"../../../units/validators/validators\";\r\n\r\n\r\ntype FormsControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input{...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                      name: FormsKeysType,\r\n                                      validators: Array<FieldValidatorType>,\r\n                                      component: React.FC<WrappedFieldProps>,\r\n                                      props = {}, text = \" \") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name}\r\n                   validate={validators} component={component}\r\n                   {...props}/> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import {instance, APIResponseType, ResultCodeCaptchaEnum, ResultCodeEnum} from \"./api\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logOut() {\r\n        return instance.delete(`auth/login`).then(res => res.data)\r\n    },\r\n};\r\n\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n        id: number\r\n}\r\n","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string \r\n}\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nimport {ResultCodeCaptchaEnum, ResultCodeEnum} from \"../api/api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state, \r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\", payload: {id, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"GET_CAPTCHA_URL_SUCCESS\", payload: {captchaUrl}\r\n    } as const),\r\n\r\n}\r\n\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logOut = (): ThunkType => async (dispatch) => {\r\n    let logOutData = await authAPI.logOut()\r\n    if (logOutData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string):ThunkType =>\r\n    async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (loginData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport default authReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {getAuthUserData} from \"./auth_reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action:ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state, initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: ()=> ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess())\r\n        })\r\n};\r\n\r\nexport default appReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","import React from \"react\";\r\nimport s from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar: React.FC = () => {\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default News;","import React from \"react\";\r\n\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport userPhoto from \"../../assets/images/default_avatar.png\";\r\n\r\nimport styles from \"./users.module.scss\";\r\nimport {UsersType} from \"../../types/types\";\r\n\r\n\r\nexport const User: React.FC<PropsType> = ({user, followingInProgress, unFollow, follow}) => {\r\n    return (\r\n        <div className={styles.userItems}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             alt=\"Avatar img\"\r\n                             className={styles.usersPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unFollow(user.id);\r\n                                  }}>Un follow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id);\r\n                                  }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport styles from \"./paginator.module.scss\";\r\n\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    portionSize?: number\r\n    onPageChanged?: (p: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    const pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return (<span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                              key={p}\r\n                              onClick={() => {\r\n                                  onPageChanged(p)\r\n                              }}>{p}</span>)\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\n\r\n","import React from \"react\";\r\n\r\nimport {User} from \"./User\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\nimport {UsersType} from \"../../types/types\";\r\n\r\nexport const Users: React.FC<PropsType> = ({onPageChanged, currentPage, totalUsersCount, pageSize, users, follow, followingInProgress, isFetching, unFollow}) => {\r\n    return (\r\n        <div>\r\n            <Paginator currentPage={currentPage} pageSize={pageSize}\r\n                       totalItemsCount={totalUsersCount} onPageChanged={onPageChanged}/>\r\n            {isFetching ? <Preloader/> :\r\n                <div>\r\n                    {users.map(u =>\r\n                        <User user={u} followingInProgress={followingInProgress}\r\n                              follow={follow} unFollow={unFollow} key={u.id}/>)\r\n                    }\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    onPageChanged: (p: number) => void\r\n}\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) =>\r\n            u[objPropName] === itemId\r\n                ? {...u, ...newObjProps}\r\n                : u\r\n        // if (u[objPropName] === itemId) {\r\n        //     return {...u, ...newObjProps}\r\n        // }\r\n        // return u;\r\n    )\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<APIResponseType>(`follow/${id}`, {},)\r\n            .then(response => response.data)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<APIResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n","import {Dispatch} from \"redux\";\r\n\r\nimport {updateObjectInArray} from \"../units/validators/object_helpers\";\r\nimport {InferActionsTypes, BaseThunkType} from \"./redux-store\";\r\n\r\nimport {UsersType} from \"../types/types\";\r\nimport {usersApi} from \"../api/users-api\";\r\nimport { APIResponseType } from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // мaсив зафоловенных номеров id\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true}),\r\n            }\r\n        case \"UN_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false}),\r\n            }\r\n        case \"SET_USERS\":\r\n            return {...state, users: action.users}\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.count}\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: \"FOLLOW\", userId\r\n    } as const),\r\n    unFollowSuccess: (userId: number) => ({\r\n        type: \"UN_FOLLOW\", userId\r\n    } as const),\r\n    setUsers: (users: Array<UsersType>) => ({\r\n        type: \"SET_USERS\", users\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SET_CURRENT_PAGE\",\r\n        currentPage: currentPage\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"TOGGLE_IS_FETCHING\",\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n\r\n}\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(currentPage));\r\n        let data = await usersApi.getUsers(currentPage, pageSize)\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    };\r\n\r\nconst followUnFollowFlow = async (dispatch: Dispatch<ActionsType>,\r\n                                  userId: number,\r\n                                  apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                  actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        followUnFollowFlow(dispatch, userId, usersApi.follow.bind(usersApi), actions.followSuccess)\r\n    };\r\nexport const unFollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        followUnFollowFlow(dispatch, userId, usersApi.unFollow.bind(usersApi), actions.unFollowSuccess)\r\n    };\r\n\r\nexport default usersReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","import {createSelector} from \"reselect\";\r\n\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users)=> {\r\n    return users.filter( () => true)\r\n});\r\n\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\n","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {Users} from \"./Users\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {\r\n    follow,\r\n    unFollow,\r\n    requestUsers\r\n} from \"../../redux/users_reducer\";\r\nimport {\r\n    getUsers,\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount\r\n} from \"../../redux/users_selectors\";\r\n\r\nimport {UsersType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <h2>{\"Пользователи\"}</h2>\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       users={this.props.users}\r\n                       unFollow={this.props.unFollow}\r\n                       follow={this.props.follow}\r\n                       onPageChanged={this.onPageChanged}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                       isFetching={this.props.isFetching}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        follow, unFollow, getUsers: requestUsers\r\n    }),\r\n)(UsersContainer);\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    users: Array<UsersType>\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = MapDispatchPropsType & MapStatePropsType & OwnPropsType\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport s from './Header.module.scss';\r\n\r\n\r\nexport const Header: React.FC<PropsType> = ({isAuth, login, logOut}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://static.rfstat.com/renderforest/images/v2/logo-homepage/gradient_2.png\" alt=\"logo img\"/>\r\n            <div className={s.loginBlock}>\r\n                {isAuth\r\n                    ? <div> {login} - <button onClick={logOut}>Log out</button></div>\r\n                    : <NavLink to={`/login`}>Login</NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logOut: () => void\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {Header} from \"./Header\";\r\nimport {logOut} from \"../../redux/auth_reducer\";\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nconst HeaderContainer: React.FC<MapStatePropsType & MapDispatchPropsType> = ({isAuth, login, logOut}) => {\r\n    return (\r\n        <Header isAuth={isAuth}\r\n                login={login}\r\n                logOut={logOut}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>\r\n(mapStateToProps, {logOut})(HeaderContainer);\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    logOut: () => void\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {required} from \"../../units/validators/validators\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {login} from \"../../redux/auth_reducer\";\r\n\r\nimport style from \"../common/FormsControls/FormsControls.module.scss\"\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormKeysType>(\"Email\",\"email\", [required], Input)}\r\n            {createField<LoginFormKeysType>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormKeysType>(undefined, \"rememberMe\", [], Input,\r\n                {type: \"checkbox\"}, \"Remember me\")}\r\n            {captchaUrl && <img alt=\"\" src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormKeysType>(\"Captcha\", \"captcha\", [required], Input, {},)}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchPropsType> = ({isAuth, captchaUrl, login}) => {\r\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormValuesType) => {\r\n        login(email, password, rememberMe, captcha)\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, PropsType>({form: \"login\"})(LoginForm);\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormKeysType = GetStringKeys<LoginFormValuesType>\r\n","import React from 'react';\nimport {Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\n\nimport {initializeApp} from \"./redux/app_reducer\";\nimport Navbar from './components/Navbar/Navbar';\nimport Music from \"./components/Music/Music\";\nimport News from \"./components/News/News\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\n\nimport './App.css';\n\nimport {AppStateType} from \"./redux/redux-store\";\n\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\n\nconst App: React.FC<PropsType> = (props) => {\n    React.useEffect(() => {\n        props.initializeApp()\n    }, [])\n\n    if (!props.initialized) return <Preloader/>\n\n    return (\n        <div className=\"app-wrapper\">\n                <HeaderContainer/>\n            <Navbar/>\n            <div className=\"app-wrapper-content\">\n                <React.Suspense fallback={<Preloader/>}>\n                    <Switch>\n                        <Route path='/' exact><Redirect to='/profile'/></Route>\n                        <Route exact path=\"/dialogs/:userId?\" component={DialogsContainer}/>\n                        <Route exact path=\"/profile/:userId?\" component={ProfileContainer}/>\n                        <Route exact path=\"/users\" component={UsersContainer}/>\n                        <Route exact path=\"/login\" component={Login}/>\n                        <Route exact path=\"/news\" component={News}/>\n                        <Route exact path=\"/music\" component={Music}/>\n                        <Route exact path=\"/settings\" component={Settings}/>\n                        <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\n                    </Switch>\n                </React.Suspense>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\ntype PropsType = ReturnType<typeof mapStateToProps> & { initializeApp: () => void }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action:any):InitialState => {\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nimport profileReducer from \"./profile_reducer\";\r\nimport dialogsReducer from \"./dialogs_reducer\";\r\nimport sidebarReducer from \"./sidebar_reducer\";\r\nimport usersReducer from \"./users_reducer\";\r\nimport authReducer from \"./auth_reducer\";\r\nimport appReducer from \"./app_reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key:string]: (...args:any[])=> infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport {Provider} from \"react-redux\";\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from \"react-router-dom\";\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\"\n\nimport './index.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\n\r\nimport style from \"./Preloader.module.scss\";\r\n\r\n\r\nexport const Preloader: React.FC = () => {\r\n    return (\r\n        <div className={style.lds_ellipsis}>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Uhnj\",\"error\":\"FormsControls_error__1peQP\",\"formSummaryError\":\"FormsControls_formSummaryError__21CTz\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => value => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"paginator_selectedPage__1sD8x\",\"paginator\":\"paginator_paginator__29Ndz\",\"pageNumber\":\"paginator_pageNumber__2mvHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"users_usersPhoto__15bKX\",\"userItems\":\"users_userItems__2byTA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1CXXc\",\"loginBlock\":\"Header_loginBlock__1OkBV\"};","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n} as MapStatePropsType);\r\n\r\nexport function withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n            return <Component {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n}","import {instance, APIResponseType} from \"./api\";\r\n\r\nimport {PhotosType, ProfileType} from \"../types/types\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    },\r\n};\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nimport {ResultCodeEnum} from \"../api/api\";\r\n\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 3},\r\n        {id: 2, message: \"It's my first post\", likesCount: 1},\r\n        {id: 3, message: \"Hello\", likesCount: 9},\r\n        {id: 4, message: \"Da-da\", likesCount: 91},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case \"SET_USER_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: \"ADD-POST\", newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const)\r\n\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n};\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    let data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        if(userId !== null) {\r\n        dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"Id пользователя не может быть null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit_profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport default profileReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>"],"sourceRoot":""}
{"version":3,"sources":["api/api.ts","api/profile-api.ts","redux/profile_reducer.ts","assets/images/default_avatar.png","redux/dialogs_reducer.ts","components/common/Preloader/Preloader.module.scss","components/Navbar/Navbar.module.scss","components/common/FormsControls/FormsControls.tsx","api/auth-api.ts","api/security-api.ts","redux/auth_reducer.ts","redux/app_reducer.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Users/User.tsx","components/common/Paginator/Paginator.tsx","redux/users_selectors.ts","components/Users/UsersSearchForm.tsx","units/validators/object_helpers.ts","api/users-api.ts","redux/users_reducer.ts","components/Users/Users.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.js","redux/sidebar_reducer.ts","redux/redux-store.ts","index.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.scss","units/validators/validators.ts","components/common/Paginator/paginator.module.scss","components/Users/users.module.scss","components/Header/Header.module.scss"],"names":["ResultCodeEnum","ResultCodeCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","profileAPI","userId","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getStatus","dispatch","a","updateStatus","resultCode","Success","savePhoto","file","saveProfile","getState","auth","getUserProfile","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","module","exports","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","FormControl","meta","touched","error","children","hasError","className","styles","formControl","TextArea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","meData","authReducer","initialized","appReducer","Navbar","s","navbar","navbar_button","to","activeClassName","active","Music","News","Settings","User","user","followingInProgress","unFollow","follow","userItems","src","small","userPhoto","alt","usersPhoto","followed","disabled","some","onClick","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","map","cn","selectedPage","pageNumber","key","getUsers","createSelector","usersPage","users","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","UserSearchForm","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","values","onSubmit","setSubmitting","isSubmitting","as","value","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersApi","response","count","requestUsers","totalCount","followUnFollowFlow","apiMethod","actionCreator","usersReducer","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","following","bind","unFollowing","Preloader","Header","logOut","header","loginBlock","connect","Login","LoginReduxForm","loginData","CaptchaIsRequired","url","length","reduxForm","form","handleSubmit","required","undefined","style","formSummaryError","DialogsContainer","React","lazy","ProfileContainer","compose","withRouter","app","initializeApp","promise","all","Suspense","fallback","path","exact","render","Boolean","window","hostname","match","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","lds_ellipsis","maxLengthCreator","maxLength"],"mappings":"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","file":"static/js/main.397a5953.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {UsersType} from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"350f9694-8da6-4ed4-9d92-64e0db1a0191\"\r\n    },\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\nexport enum ResultCodeCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UsersType>\r\n    totalCount: number,\r\n    error: null | string\r\n}\r\n\r\nexport type APIResponseType<D = {},RC = ResultCodeEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\nimport {PhotosType, ProfileType} from \"../types/types\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    },\r\n};\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nimport {ResultCodeEnum} from \"../api/api\";\r\n\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 3},\r\n        {id: 2, message: \"It's my first post\", likesCount: 1},\r\n        {id: 3, message: \"Hello\", likesCount: 9},\r\n        {id: 4, message: \"Da-da\", likesCount: 91},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case \"SET_USER_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: \"ADD-POST\", newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const)\r\n\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n};\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    let data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        if(userId !== null) {\r\n        dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"Id пользователя не может быть null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit_profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport default profileReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/default_avatar.7e3dbe23.png\";","import {InferActionsTypes } from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number, name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number, message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Аноним\"},\r\n        {id: 2, name: \"Аноним\"},\r\n        {id: 3, name: \"Аноним\"},\r\n        {id: 5, name: \"Аноним\"},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"How are you\"},\r\n        {id: 3, message: \"Hey yo\"},\r\n    ] as Array<MessageType>,\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({\r\n        type: \"SEND-MESSAGE\" ,newMessageBody} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_ellipsis\":\"Preloader_lds_ellipsis__Pgs5k\",\"lds-ellipsis1\":\"Preloader_lds-ellipsis1__2zy5n\",\"lds-ellipsis2\":\"Preloader_lds-ellipsis2__3rCGb\",\"lds-ellipsis3\":\"Preloader_lds-ellipsis3__3b2y5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__14lBz\",\"navbar_button\":\"Navbar_navbar_button__1aWtC\",\"active\":\"Navbar_active__1zKWB\"};","import React from \"react\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\nimport styles from \"./FormsControls.module.scss\";\r\n\r\nimport {FieldValidatorType} from \"../../../units/validators/validators\";\r\n\r\n\r\ntype FormsControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input{...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                      name: FormsKeysType,\r\n                                      validators: Array<FieldValidatorType>,\r\n                                      component: React.FC<WrappedFieldProps>,\r\n                                      props = {}, text = \" \") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name}\r\n                   validate={validators} component={component}\r\n                   {...props}/> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import {instance, APIResponseType, ResultCodeCaptchaEnum, ResultCodeEnum} from \"./api\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logOut() {\r\n        return instance.delete(`auth/login`).then(res => res.data)\r\n    },\r\n};\r\n\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n        id: number\r\n}\r\n","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string \r\n}\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nimport {ResultCodeCaptchaEnum, ResultCodeEnum} from \"../api/api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state, \r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\", payload: {id, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"GET_CAPTCHA_URL_SUCCESS\", payload: {captchaUrl}\r\n    } as const),\r\n\r\n}\r\n\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logOut = (): ThunkType => async (dispatch) => {\r\n    let logOutData = await authAPI.logOut()\r\n    if (logOutData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string):ThunkType =>\r\n    async (dispatch) => {\r\n    const loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (loginData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport default authReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {getAuthUserData} from \"./auth_reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action:ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state, initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: ()=> ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess())\r\n        })\r\n};\r\n\r\nexport default appReducer\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","import React from \"react\";\r\nimport s from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar: React.FC = () => {\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={s.navbar_button}>\r\n                <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default News;","import React from \"react\";\r\n\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport userPhoto from \"../../assets/images/default_avatar.png\";\r\n\r\nimport styles from \"./users.module.scss\";\r\nimport {UsersType} from \"../../types/types\";\r\n\r\n\r\nexport const User: React.FC<PropsType> = ({user, followingInProgress, unFollow, follow}) => {\r\n    return (\r\n        <div className={styles.userItems}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             alt=\"Avatar img\"\r\n                             className={styles.usersPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unFollow(user.id);\r\n                                  }}>Un follow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id);\r\n                                  }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport styles from \"./paginator.module.scss\";\r\n\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    portionSize?: number\r\n    onPageChanged?: (p: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    const pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return (<span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                  key={p}\r\n                                  onClick={() => {\r\n                                      onPageChanged(p)\r\n                                  }}>{p}</span>)\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {createSelector} from \"reselect\";\r\n\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector(getUsersSelector, (users)=> {\r\n    return users.filter( () => true)\r\n});\r\n\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getUsersFilter = (state:AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\nimport {FilterType} from \"../../redux/users_reducer\";\r\nimport {getUsersFilter} from \"../../redux/users_selectors\";\r\n\r\n\r\nexport const UserSearchForm: React.FC<PropsType> = ({onFilterChanged}) => {\r\n    const filter = useSelector(getUsersFilter);\r\n    const onSubmit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    const usersSearchFormValidate = (values: any) => {\r\n        // const errors = {}\r\n        // return errors\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={onSubmit}>\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Followed</option>\r\n                            <option value=\"false\">Un followed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) =>\r\n            u[objPropName] === itemId\r\n                ? {...u, ...newObjProps}\r\n                : u\r\n        // if (u[objPropName] === itemId) {\r\n        //     return {...u, ...newObjProps}\r\n        // }\r\n        // return u;\r\n    )\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\n\r\nexport const usersApi = {getUsers(currentPage = 1, pageSize = 10, term = \"\", friend: null | false | true = null) {\r\n        return instance.get<GetItemsType>\r\n        (`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<APIResponseType>(`follow/${id}`, {},)\r\n            .then(response => response.data)\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<APIResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n","import {Dispatch} from \"redux\";\r\n\r\nimport {updateObjectInArray} from \"../units/validators/object_helpers\";\r\nimport {InferActionsTypes, BaseThunkType} from \"./redux-store\";\r\n\r\nimport {UsersType} from \"../types/types\";\r\nimport {usersApi} from \"../api/users-api\";\r\nimport {APIResponseType} from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // мaсив зафоловенных номеров id\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true}),\r\n            }\r\n        case \"UN_FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false}),\r\n            }\r\n        case \"SET_USERS\":\r\n            return {...state, users: action.users}\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.count}\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        case \"SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: \"FOLLOW\", userId\r\n    } as const),\r\n    unFollowSuccess: (userId: number) => ({\r\n        type: \"UN_FOLLOW\", userId\r\n    } as const),\r\n    setUsers: (users: Array<UsersType>) => ({\r\n        type: \"SET_USERS\", users\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SET_CURRENT_PAGE\",\r\n        currentPage: currentPage\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"TOGGLE_IS_FETCHING\",\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SET_FILTER\",\r\n        payload: filter\r\n    } as const)\r\n\r\n}\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(currentPage));\r\n        dispatch(actions.setFilter(filter));\r\n        let data = await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    };\r\n\r\nconst followUnFollowFlow = async (dispatch: Dispatch<ActionsType>,\r\n                                  userId: number,\r\n                                  apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                  actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await followUnFollowFlow(dispatch, userId, usersApi.follow.bind(usersApi), actions.followSuccess)\r\n    };\r\nexport const unFollow = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        await followUnFollowFlow(dispatch, userId, usersApi.unFollow.bind(usersApi), actions.unFollowSuccess)\r\n    };\r\n\r\nexport default usersReducer\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\nimport {User} from \"./User\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {UserSearchForm} from \"./UsersSearchForm\";\r\n\r\nimport {FilterType, follow, requestUsers, unFollow} from \"../../redux/users_reducer\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users_selectors\";\r\n\r\n\r\nexport const Users: React.FC<PropsType> = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const users = useSelector(getUsers);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const filter = useSelector(getUsersFilter);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isFetching = useSelector(getIsFetching);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n            history.push({\r\n            pathname: \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const following = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unFollowing = (userId: number) => {\r\n        dispatch(unFollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{\"Пользователи\"}</h2>\r\n            <UserSearchForm onFilterChanged={onFilterChanged}/>\r\n            <Paginator currentPage={currentPage} pageSize={pageSize}\r\n                       totalItemsCount={totalUsersCount} onPageChanged={onPageChanged}/>\r\n            {isFetching ? <Preloader/> :\r\n                <div>\r\n                    {users.map(u =>\r\n                        <User user={u} followingInProgress={followingInProgress}\r\n                              follow={following} unFollow={unFollowing} key={u.id}/>)\r\n                    }\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {}\r\ntype QueryParamsType = {term?: string, friend?: string, page?: string}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport s from './Header.module.scss';\r\n\r\n\r\nexport const Header: React.FC<PropsType> = ({isAuth, login, logOut}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://static.rfstat.com/renderforest/images/v2/logo-homepage/gradient_2.png\" alt=\"logo img\"/>\r\n            <div className={s.loginBlock}>\r\n                {isAuth\r\n                    ? <div> {login} - <button onClick={logOut}>Log out</button></div>\r\n                    : <NavLink to={`/login`}>Login</NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logOut: () => void\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {Header} from \"./Header\";\r\nimport {logOut} from \"../../redux/auth_reducer\";\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nconst HeaderContainer: React.FC<MapStatePropsType & MapDispatchPropsType> = ({isAuth, login, logOut}) => {\r\n    return (\r\n        <Header isAuth={isAuth}\r\n                login={login}\r\n                logOut={logOut}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>\r\n(mapStateToProps, {logOut})(HeaderContainer);\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    logOut: () => void\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {required} from \"../../units/validators/validators\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {login} from \"../../redux/auth_reducer\";\r\n\r\nimport style from \"../common/FormsControls/FormsControls.module.scss\"\r\n\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormKeysType>(\"Email\",\"email\", [required], Input)}\r\n            {createField<LoginFormKeysType>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormKeysType>(undefined, \"rememberMe\", [], Input,\r\n                {type: \"checkbox\"}, \"Remember me\")}\r\n            {captchaUrl && <img alt=\"\" src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormKeysType>(\"Captcha\", \"captcha\", [required], Input, {},)}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport const Login: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n\r\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormValuesType) => {\r\n        dispatch(login(email, password, rememberMe, captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, PropsType>({form: \"login\"})(LoginForm);\r\n\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormKeysType = GetStringKeys<LoginFormValuesType>\r\n","import React from 'react';\nimport {Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\n\nimport {initializeApp} from \"./redux/app_reducer\";\nimport Navbar from './components/Navbar/Navbar';\nimport Music from \"./components/Music/Music\";\nimport News from \"./components/News/News\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {Users} from \"./components/Users/Users\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\n\nimport './App.css';\n\nimport {AppStateType} from \"./redux/redux-store\";\n\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\n\nconst App: React.FC<PropsType> = (props) => {\n    React.useEffect(() => {\n        props.initializeApp()\n    }, [])\n\n    if (!props.initialized) return <Preloader/>\n\n    return(\n        <div className=\"app-wrapper\">\n                <HeaderContainer/>\n            <Navbar/>\n            <div className=\"app-wrapper-content\">\n                <React.Suspense fallback={<Preloader/>}>\n                    <Switch>\n                        <Route path='/' exact><Redirect to='/profile'/></Route>\n                        <Route exact path=\"/dialogs/:userId?\" component={DialogsContainer}/>\n                        <Route exact path=\"/profile/:userId?\" component={ProfileContainer}/>\n                        <Route exact path=\"/users\" component={Users}/>\n                        <Route exact path=\"/login\" component={Login}/>\n                        <Route exact path=\"/news\" component={News}/>\n                        <Route exact path=\"/music\" component={Music}/>\n                        <Route exact path=\"/settings\" component={Settings}/>\n                        <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\n                    </Switch>\n                </React.Suspense>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\ntype PropsType = ReturnType<typeof mapStateToProps> & { initializeApp: () => void }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action:any):InitialState => {\r\n\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nimport profileReducer from \"./profile_reducer\";\r\nimport dialogsReducer from \"./dialogs_reducer\";\r\nimport sidebarReducer from \"./sidebar_reducer\";\r\nimport usersReducer from \"./users_reducer\";\r\nimport authReducer from \"./auth_reducer\";\r\nimport appReducer from \"./app_reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key:string]: (...args:any[])=> infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport {Provider} from \"react-redux\";\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from \"react-router-dom\";\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\"\n\nimport './index.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\n\r\nimport style from \"./Preloader.module.scss\";\r\n\r\n\r\nexport const Preloader: React.FC = () => {\r\n    return (\r\n        <div className={style.lds_ellipsis}>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Uhnj\",\"error\":\"FormsControls_error__1peQP\",\"formSummaryError\":\"FormsControls_formSummaryError__21CTz\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => value => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"paginator_selectedPage__1sD8x\",\"paginator\":\"paginator_paginator__29Ndz\",\"pageNumber\":\"paginator_pageNumber__2mvHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"users_usersPhoto__15bKX\",\"userItems\":\"users_userItems__2byTA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1CXXc\",\"loginBlock\":\"Header_loginBlock__1OkBV\"};"],"sourceRoot":""}